#seleccion covariables
glmformula=NULL
for (i in 1:ncol(capa_glm){
glmformula<-paste(glmformula, "capa_glm[,",i,"]+" , sep="")
}
#escritura string funcion
glmfunction<-paste("fitglmcat<-gam(datos_temporales[,col_cat]~",glmformula,"family='poisson')",sep="")
#esta es la formula original
#fitglmcat<-glm(categoria_t[,1]~cosine+as.factor(tempdias_se),family="poisson")
summary(fitglmcat)
#ejecucion formula
eval(parse(text=glmfunction))
#evaluamos si el r.s.q es menor que el anterior
if(oldrsq>=summary(fitglmcat)$r.sq){
seguirgam=FALSE
}
#guardamos el valor r.s.q para poder compara en la siguiente iteración
oldrsq_glm<-summary(fitglmcat)$r.sq
#------evaluamos que valores de p-value son menores que 0.006-----
#hay que comparar los valores a  partir de la segunda columna
#1)convertimos en un vecor los valores
pvalues_glm<-c(summary(fitglmcat)$p.pv[1:length(column_selec_glm)+1])
#2)comprovamos si no hay pvalues <0.006 para salir del bucle
if(length(pvalues_glm[pvalues<=0.006])==0){
seguirgam=FALSE
}
#3)asignamos el nombre correcto a las columnas de las covariables
pvalues_glm<-setNames(pvalues, columnas)
#4)seleccionamos tan solo las variles con p-value<0.006
goodp_glm<-pvalues_glm[pvalues>0.006]
#5)volvemos a seleccionar las columnas correctas
columnas_glm<-names(goodp_glm)
#----fin p-value
#comapramos el valor viejo de r.s.q con el nuevo
if(oldrsq_glm>=summary(fitglmcat)$r.sq){
seguirglm=FALSE
}
#guardamos el valor de rsq para volver a comparar
oldrsq_glm=summary(fitglmcat)$r.sq
}
ncol(capa_glm)
glmformula=NULL
for (i in 1:ncol(capa_glm){
paste(glmformula, i)
#glmformula<-paste(glmformula, "capa_glm[,",i,"]+" , sep="")
}
seguirglm=TRUE #inicializamos el valor para el bucle
oldrsq_glm=0#inicializamos el r.s.q pra poder ocmpara con los resultados anteriores
while(seguirglm){
#-------------Selección de columnas con covariables-------------
#utilizamos el objeto columnas que contiene un vector con el nombre de las columnas
#seleccionadas
#inicializamos el vector resultado
column_selec_glm= NULL
#recorremos en un bucle para encontrar todas las columnas que coinciden
for(i in 1:length(col_temp)){
column_selec_glm<-c(column_selec_glm, which(names(datos_temporales)==col_temp[i]))
}
#seleccionamos DataFrame solo con las covariables a trabajar
capa_glm<-datos_temporales[,column_selec_glm]
#---construccion funcion glm
#seleccion covariables
glmformula=NULL
for (i in 1:ncol(capa_glm)){
glmformula<-paste(glmformula, "capa_glm[,",i,"]+" , sep="")
}
for(i in 1:ncol(capa_glm))
#escritura string funcion
glmfunction<-paste("fitglmcat<-gam(datos_temporales[,col_cat]~",glmformula,"family='poisson')",sep="")
#esta es la formula original
#fitglmcat<-glm(categoria_t[,1]~cosine+as.factor(tempdias_se),family="poisson")
summary(fitglmcat)
#ejecucion formula
eval(parse(text=glmfunction))
#evaluamos si el r.s.q es menor que el anterior
if(oldrsq>=summary(fitglmcat)$r.sq){
seguirgam=FALSE
}
#guardamos el valor r.s.q para poder compara en la siguiente iteración
oldrsq_glm<-summary(fitglmcat)$r.sq
#------evaluamos que valores de p-value son menores que 0.006-----
#hay que comparar los valores a  partir de la segunda columna
#1)convertimos en un vecor los valores
pvalues_glm<-c(summary(fitglmcat)$p.pv[1:length(column_selec_glm)+1])
#2)comprovamos si no hay pvalues <0.006 para salir del bucle
if(length(pvalues_glm[pvalues<=0.006])==0){
seguirgam=FALSE
}
#3)asignamos el nombre correcto a las columnas de las covariables
pvalues_glm<-setNames(pvalues, columnas)
#4)seleccionamos tan solo las variles con p-value<0.006
goodp_glm<-pvalues_glm[pvalues>0.006]
#5)volvemos a seleccionar las columnas correctas
columnas_glm<-names(goodp_glm)
#----fin p-value
#comapramos el valor viejo de r.s.q con el nuevo
if(oldrsq_glm>=summary(fitglmcat)$r.sq){
seguirglm=FALSE
}
#guardamos el valor de rsq para volver a comparar
oldrsq_glm=summary(fitglmcat)$r.sq
}
fitglmcat
glmfunction<-paste("fitglmcat<-gam(datos_temporales[,col_cat]~",glmformula,"family='poisson')",sep="")
glmfunction
seguirglm=TRUE #inicializamos el valor para el bucle
oldrsq_glm=0#inicializamos el r.s.q pra poder ocmpara con los resultados anteriores
while(seguirglm){
#-------------Selección de columnas con covariables-------------
#utilizamos el objeto columnas que contiene un vector con el nombre de las columnas
#seleccionadas
#inicializamos el vector resultado
column_selec_glm= NULL
#recorremos en un bucle para encontrar todas las columnas que coinciden
for(i in 1:length(col_temp)){
column_selec_glm<-c(column_selec_glm, which(names(datos_temporales)==col_temp[i]))
}
#seleccionamos DataFrame solo con las covariables a trabajar
capa_glm<-datos_temporales[,column_selec_glm]
#---construccion funcion glm
#seleccion covariables
glmformula=NULL
for (i in 1:ncol(capa_glm)){
glmformula<-paste(glmformula, "capa_glm[,",i,"]+" , sep="")
}
for(i in 1:ncol(capa_glm))
#escritura string funcion
glmfunction<-paste("fitglmcat<-glm(datos_temporales[,col_cat]~",glmformula,"family='poisson')",sep="")
#esta es la formula original
#fitglmcat<-glm(categoria_t[,1]~cosine+as.factor(tempdias_se),family="poisson")
#REVISAR ACÍ
summary(fitglmcat)
#ejecucion formula
eval(parse(text=glmfunction))
#evaluamos si el r.s.q es menor que el anterior
if(oldrsq>=summary(fitglmcat)$r.sq){
seguirgam=FALSE
}
#guardamos el valor r.s.q para poder compara en la siguiente iteración
oldrsq_glm<-summary(fitglmcat)$r.sq
#------evaluamos que valores de p-value son menores que 0.006-----
#hay que comparar los valores a  partir de la segunda columna
#1)convertimos en un vecor los valores
pvalues_glm<-c(summary(fitglmcat)$p.pv[1:length(column_selec_glm)+1])
#2)comprovamos si no hay pvalues <0.006 para salir del bucle
if(length(pvalues_glm[pvalues<=0.006])==0){
seguirgam=FALSE
}
#3)asignamos el nombre correcto a las columnas de las covariables
pvalues_glm<-setNames(pvalues, columnas)
#4)seleccionamos tan solo las variles con p-value<0.006
goodp_glm<-pvalues_glm[pvalues>0.006]
#5)volvemos a seleccionar las columnas correctas
columnas_glm<-names(goodp_glm)
#----fin p-value
#comapramos el valor viejo de r.s.q con el nuevo
if(oldrsq_glm>=summary(fitglmcat)$r.sq){
seguirglm=FALSE
}
#guardamos el valor de rsq para volver a comparar
oldrsq_glm=summary(fitglmcat)$r.sq
}
fitglmcat
glmfunction
seguirglm=TRUE #inicializamos el valor para el bucle
oldrsq_glm=0#inicializamos el r.s.q pra poder ocmpara con los resultados anteriores
while(seguirglm){
#-------------Selección de columnas con covariables-------------
#utilizamos el objeto columnas que contiene un vector con el nombre de las columnas
#seleccionadas
#inicializamos el vector resultado
column_selec_glm= NULL
#recorremos en un bucle para encontrar todas las columnas que coinciden
for(i in 1:length(col_temp)){
column_selec_glm<-c(column_selec_glm, which(names(datos_temporales)==col_temp[i]))
}
#seleccionamos DataFrame solo con las covariables a trabajar
capa_glm<-datos_temporales[,column_selec_glm]
#---construccion funcion glm
#seleccion covariables
glmformula=NULL
for (i in 1:ncol(capa_glm)){
glmformula<-paste(glmformula, "capa_glm[,",i,"]+" , sep="")
}
for(i in 1:ncol(capa_glm))
#escritura string funcion
glmfunction<-paste("fitglmcat<-glm(datos_temporales[,col_cat]~",glmformula,"family='poisson')",sep="")
#esta es la formula original
#fitglmcat<-glm(categoria_t[,1]~cosine+as.factor(tempdias_se),family="poisson")
#REVISAR ACÍ
#summary(fitglmcat)
#ejecucion formula
eval(parse(text=glmfunction))
#evaluamos si el r.s.q es menor que el anterior
if(oldrsq>=summary(fitglmcat)$r.sq){
seguirgam=FALSE
}
#guardamos el valor r.s.q para poder compara en la siguiente iteración
oldrsq_glm<-summary(fitglmcat)$r.sq
#------evaluamos que valores de p-value son menores que 0.006-----
#hay que comparar los valores a  partir de la segunda columna
#1)convertimos en un vecor los valores
pvalues_glm<-c(summary(fitglmcat)$p.pv[1:length(column_selec_glm)+1])
#2)comprovamos si no hay pvalues <0.006 para salir del bucle
if(length(pvalues_glm[pvalues<=0.006])==0){
seguirgam=FALSE
}
#3)asignamos el nombre correcto a las columnas de las covariables
pvalues_glm<-setNames(pvalues, columnas)
#4)seleccionamos tan solo las variles con p-value<0.006
goodp_glm<-pvalues_glm[pvalues>0.006]
#5)volvemos a seleccionar las columnas correctas
columnas_glm<-names(goodp_glm)
#----fin p-value
#comapramos el valor viejo de r.s.q con el nuevo
if(oldrsq_glm>=summary(fitglmcat)$r.sq){
seguirglm=FALSE
}
#guardamos el valor de rsq para volver a comparar
oldrsq_glm=summary(fitglmcat)$r.sq
}
install.packages("tweet2r")
library(twee2r)
library(tweet2r)
#Configuration fo twitter API connection
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumerKey <- " rXu02gEtPnzH81cxDRKUnhNia"
consumerSecret <- " 0Ean4ymoxmB4OWt9a6RgNP0Kap0CbRL1lFBO7QPDiGoP5v8d8j"
#definition of the start time and end time
start<-"2015-10-5 15:24:00"
end<-"2015-10-11 23:59:59"
#definition of the file prefix
fileprefix="tweets"
key=c("keyword1", "keyword2")
#definition number of tweets per file
number=3000
#running the function
tweet2r(start=start,end=end,ntweets=number,keywords=key,fileprefix = fileprefix
requestURL,accessURL,authURL,consumerKey,consumerSecret)
library(tweet2r)
#Configuration fo twitter API connection
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumerKey <- " rXu02gEtPnzH81cxDRKUnhNia"
consumerSecret <- " 0Ean4ymoxmB4OWt9a6RgNP0Kap0CbRL1lFBO7QPDiGoP5v8d8j"
#definition of the start time and end time
start<-"2015-10-5 15:24:00"
end<-"2015-10-11 23:59:59"
#definition of the file prefix
fileprefix="tweets"
key=c("keyword1", "keyword2")
#definition number of tweets per file
number=3000
#running the function
tweet2r(start=start,end=end,ntweets=number,keywords=key,fileprefix = fileprefix,
requestURL,accessURL,authURL,consumerKey,consumerSecret)
library(tweet2r)
#Configuration fo twitter API connection
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumerKey <- " rXu02gEtPnzH81cxDRKUnhNia"
consumerSecret <- " 0Ean4ymoxmB4OWt9a6RgNP0Kap0CbRL1lFBO7QPDiGoP5v8d8j"
#definition of the start time and end time
start<-"2015-10-5 15:24:00"
end<-"2015-10-11 23:59:59"
#definition of the file prefix
fileprefix="tweets"
key=c("keyword1", "keyword2")
#definition number of tweets per file
number=3000
#running the function
tweet2r(start=start,end=end,ntweets=number,keywords=key,fileprefix = fileprefix,
requestURL,accessURL,authURL,consumerKey,consumerSecret)
tweet2r(start=start,end=end,ntweets=number,keywords=key,fileprefix = fileprefix,
requestURL,accessURL,authURL,consumerKey,consumerSecret)
tweet2r(start=start,end=end,ntweets=number,keywords=key,fileprefix = fileprefix,
requestURL,accessURL,authURL,consumerKey,consumerSecret)
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumerKey <- "rXu02gEtPnzH81cxDRKUnhNia"
consumerSecret <- " 0Ean4ymoxmB4OWt9a6RgNP0Kap0CbRL1lFBO7QPDiGoP5v8d8j"
#running the function
tweet2r(start=start,end=end,ntweets=number,keywords=key,fileprefix = fileprefix,
requestURL,accessURL,authURL,consumerKey,consumerSecret)
tweet2r(start=start,end=end,ntweets=number,keywords=key,fileprefix = fileprefix,
requestURL,accessURL,authURL=authURL,consumerKey,consumerSecret)
tweet2r(start=start,end=end,ntweets=number,keywords=key,fileprefix = fileprefix,
requestURL=requestURL,accessURL=acccessURL,authURL=authURL,consumerKey=consumerKey,consumerSecret=consumerSecret)
#running the function
tweet2r(start=start,end=end,ntweets=number,keywords=key,fileprefix = fileprefix,
requestURL=requestURL,accessURL=accessURL,authURL=authURL,consumerKey=consumerKey,consumerSecret=consumerSecret)
tweet2r(start=start,end=end,ntweets=number,keywords=key,fileprefix = fileprefix,
requestURL=requestURL,accessURL=accessURL,authURL=authURL,consumerKey=consumerKey,consumerSecret=consumerSecret)
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumerKey <- "rXu02gEtPnzH81cxDRKUnhNia"
consumerSecret <- " 0Ean4ymoxmB4OWt9a6RgNP0Kap0CbRL1lFBO7QPDiGoP5v8d8j"
tweet2r(start=start,end=end,ntweets=number,keywords=key,fileprefix = fileprefix,
requestURL=requestURL,accessURL=accessURL,authURL=authURL,consumerKey=consumerKey,consumerSecret=consumerSecret)
start<-"2015-10-5 15:29:00"
end<-"2015-10-11 23:59:59"
#definition of the file prefix
fileprefix="tweets"
key=c("keyword1", "keyword2")
#definition number of tweets per file
number=3000
#running the function
tweet2r(start=start,end=end,ntweets=number,keywords=key,fileprefix = fileprefix,
requestURL=requestURL,accessURL=accessURL,authURL=authURL,consumerKey=consumerKey,consumerSecret=consumerSecret)
tweet2r:::tweet2r(start=start,end=end,ntweets=number,keywords=key,fileprefix = fileprefix,
requestURL=requestURL,accessURL=accessURL,authURL=authURL,consumerKey=consumerKey,consumerSecret=consumerSecret)
authURL <- "https://api.twitter.com/oauth/authorize"
consumerKey <- "rXu02gEtPnzH81cxDRKUnhNia"
consumerSecret <- "0Ean4ymoxmB4OWt9a6RgNP0Kap0CbRL1lFBO7QPDiGoP5v8d8j"
tweet2r(start=start,end=end,ntweets=number,keywords=key,fileprefix = fileprefix,
requestURL=requestURL,accessURL=accessURL,authURL=authURL,consumerKey=consumerKey,consumerSecret=consumerSecret)
start<-"2015-11-5 15:32:00"
end<-"2015-11-11 23:59:59"
tweet2r(start=start,end=end,ntweets=number,keywords=key,fileprefix = fileprefix,
requestURL=requestURL,accessURL=accessURL,authURL=authURL,consumerKey=consumerKey,consumerSecret=consumerSecret)
2+2
2+x
2+x
as.POSIXct(strptime(castello$created_at, "%a %b %d %H:%M:%S %z %Y", tz = "UTC"), tz = "UTC")
shp<-readOGR(dsn="/media/sanipau/Pau/UJI/eurocop/policas/capes-tre/ejes",layer="ejes_ayu_red")
library(rgdal)
shp<-readOGR(dsn="/media/sanipau/Pau/UJI/eurocop/policas/capes-tre/ejes",layer="ejes_ayu_red")
library(sp)
rand_poin<-spsample(shp, n=1, "random")
rand_poin<-spsample(shp, n=100, "random")
plot(rand_poin)
rand_poin<-spsample(shp, n=1000, "random")
plot(rand_poin)
nrow(rand_poin@data)
nrow(rand_poin)
nrow(rand_poin@coords)
nstreets=nrow(shp@data)
nstreets
rand_poin<-spsample(shp, n=nstreets, "random")
plot(rand_poin)
rand_poin<-spsample(shp, n=10, "random")
plot(rand_poin)
rand_poin<-spsample(shp, n=100, "random")
library(spatstat)
as.psp(shp)
shp[1,]
rand_poin<-spsample(shp[1,], n=1, "random")
plot(rand_poin)
plot(shp[1,], overlay=TRUE)
as.psp(shp)
plot(rand_poin)
plot(shp[,])
plot(rand_poin)
plot(rand_poin)
par(shp[1,])
par(shp[1,], append=TRUE)
plot(shp[1,], append=TRUE)
plot(rand_poin)
plot(shp[1,], add=TRUE)
rand_poin<-spsample(shp[2,], n=1, "random")
plot(rand_poin)
plot(shp[2,], add=TRUE)
rand_poin<-spsample(shp[3,], n=1, "random")
plot(rand_poin)
plot(shp[3,], add=TRUE)
rand_poin<-spsample(shp[3,], n=1, "random")
shp<-readOGR(dsn="/media/sanipau/Pau/UJI/eurocop/policas/capes-tre/ejes",layer="ejes_ayu_red")
rand_poin<-spsample(shp[3,], n=1, "random")
plot(rand_poin)
plot(shp[3,], add=TRUE)
library(sp)
rand_poin<-spsample(shp[3,], n=1, "random")
plot(rand_poin)
plot(shp[3,], add=TRUE)
rand_poin<-spsample(shp[5,], n=1, "random")
plot(rand_poin)
plot(shp[5,], add=TRUE)
rand_poin<-spsample(shp[1000,], n=1, "random")
plot(rand_poin)
plot(shp[1000,], add=TRUE)
rand_poin<-spsample(shp[1000,], n=1, "regurlar")
plot(rand_poin)
plot(shp[1000,], add=TRUE)
rand_poin<-spsample(shp[1000,], n=2, "regurlar")
shp<-readOGR(dsn="/media/sanipau/Pau/UJI/eurocop/policas/capes-tre/ejes",layer="ejes_ayu_red")
rand_poin<-spsample(shp[1000,], n=2, "regurlar")
rand_poin<-spsample(shp[1000,], n=2, "random")
plot(rand_poin)
plot(shp[1000,], add=TRUE)
rand_poin<-spsample(shp[1000,], n=1, "random")
plot(rand_poin)
plot(shp[1000,], add=TRUE)
as.psp(shp)
class(shp)
library(spatstat)
as.psp(shp)
as(shp,psp)
rand_poin<-spsample(shp[1000,], n=5, "regurlar")
plot(rand_poin)
plot(shp[1000,], add=TRUE)
rand_poin<-spsample(shp[1000,], n=5, "regurlar")
rand_poin<-spsample(shp[1000,], n=5, "random")
plot(rand_poin)
plot(shp[1000,], add=TRUE)
rand_poin<-spsample(shp[1000,], n=1, "random")
plot(rand_poin)
plot(shp[1000,], add=TRUE)
rand_poin<-spsample(shp, n=1000, "random")
plot(rand_poin)
plot(shp[1000,], add=TRUE)
plot(shp[, add=TRUE)
plot(shp, add=TRUE)
kk<-function(consumerKey="rXu02gEtPnzH81cxDRKUnhNia",
consumerSecret="0Ean4ymoxmB4OWt9a6RgNP0Kap0CbRL1lFBO7QPDiGoP5v8d8j",
requestURL="https://api.twitter.com/oauth/request_token",
accessURL="https://api.twitter.com/oauth/access_token",
authURL="https://api.twitter.com/oauth/authorize"){
}
kk()
kk<-function(consumerKey="rXu02gEtPnzH81cxDRKUnhNia",
consumerSecret="0Ean4ymoxmB4OWt9a6RgNP0Kap0CbRL1lFBO7QPDiGoP5v8d8j",
requestURL="https://api.twitter.com/oauth/request_token",
accessURL="https://api.twitter.com/oauth/access_token",
authURL="https://api.twitter.com/oauth/authorize"){
consumerKey
consumerSecret
requestURL
accessURL
authURL
}
kk()
a=kk()
kk<-function(consumerKey="rXu02gEtPnzH81cxDRKUnhNia",
consumerSecret="0Ean4ymoxmB4OWt9a6RgNP0Kap0CbRL1lFBO7QPDiGoP5v8d8j",
requestURL="https://api.twitter.com/oauth/request_token",
accessURL="https://api.twitter.com/oauth/access_token",
authURL="https://api.twitter.com/oauth/authorize"){
return(consumerKey,consumerSecret,requestURL,accessURL,authURL)
}
kk()
kk<-function(consumerKey="rXu02gEtPnzH81cxDRKUnhNia",
consumerSecret="0Ean4ymoxmB4OWt9a6RgNP0Kap0CbRL1lFBO7QPDiGoP5v8d8j",
requestURL="https://api.twitter.com/oauth/request_token",
accessURL="https://api.twitter.com/oauth/access_token",
authURL="https://api.twitter.com/oauth/authorize"){
return(cbind(consumerKey,consumerSecret,requestURL,accessURL,authURL))
}
kk()
requestURL <- 1
accessURL <- 2
authURL <- 3
consumerKey <- 4
consumerSecret <- 5
kk()
kk(requestURL,accessURL,authURL,consumerKey,consumerSecret)
hechos<-readOGR(dsn="/home/parago/Documentos/Dropbox/pau-treballant/modelo_R",layer="salida_llamada_eje_red")
library(rgdal)
hechos<-readOGR(dsn="/home/parago/Documentos/Dropbox/pau-treballant/modelo_R",layer="salida_llamada_eje_red")
hechos<-readOGR(dsn="/home/sanipau/Documentos/Dropbox/pau-treballant/modelo_R",layer="salida_llamada_eje_red")
hechos<-readOGR(dsn="/home/sanipau/Documents/Dropbox/pau-treballant/modelo_R",layer="salida_llamada_eje_red")
plot(hechos)
geotweets<-t2gis(dbname,export)
library(tweet2r)
geotweets<-t2gis(dbname,export)
dbname="castnov"
geotweets<-t2gis(dbname,export)
setwd("~/Documents/Dropbox/pau-treballant/tweet2R/json_test_data")
geotweets<-t2gis(dbname,export)
summary<-t2summary(tweets, geotweets)
geotweets<-t2gis(dbname,export)
export="shp"
geotweets<-t2gis(dbname,export)
summary<-t2summary(tweets, geotweets)
#show output
summary
summary<-t2summary(tweets, geotweets)
summary
tsummary<-t2summary(tweets, geotweets)
tsummary
geotweets<-t2gis(dbname,export)
export="shp"
#database name
dbname="castnov"
geotweets<-t2gis(dbname,export)
geotweets<-t2gis(dbname,export)
summary<-t2summary(tweets, geotweets)
#show output
summary
summary<-t2summary(tweets, geotweets)
tsummary<-t2summary(tweets, geotweets)
fileprefix="castnov"
summary<-t2summary(tweets, geotweets)
tweets<-t2sqlite(fileprefix, import=TRUE)
fileprefix="castnov"
tweets<-t2sqlite(fileprefix, import=TRUE)
names(tweets)
nrow(tweets)
tweets[9730,]
#export as kml
export="shp"
#database name
dbname="castnov"
geotweets<-t2gis(dbname,export)
summary<-t2summary(tweets, geotweets)
#show output
summary
